# télécharger vscode depuis le site de MS

# Installez le module *remote development* de VSCode
- aller dans le tab vertical avant dernier ou dernier
- tapez remote developpement install

# se connecter en ssh

F1 tapez 'ssh-connect to host'
> entrez la commande de connexion ssh sur l'hôte
ssh test@192.168.3.101 -p 2522

La connexion a été ajouté et le fichier de conf généré à l'emplacement par default "c:\users\username\.ssh\config"
############################
Host 192.168.3.101
  HostName 192.168.3.101
  User test
  Port 2522
  IdentityFile ~/.ssh/id_rsa.p
############################ 
> entrer le chemin jusq'à la clé
IdentityFile ~/.ssh/id_rsa.pub

> configurer comme çà la clé ne marche pas mais l'authentification par mot de passe fonctionne

#  verifiez que python3, pip3 et virtualenv / env sont bien installés sur la VM

> apt-cache policy python3 (oui)

> apt-cache policy pip3 (non)
> sudo apt install python3-pip

> apt-cache policy virtualenv (oui)

> apt-cache policy env (non)
sudo apt install python3-env

# installer les modules Flask et Pika
pip install flask
pip install pika

# Ecrivez les fonctions 
création/envoie/Reception message dans une file rabbitmq
receive.py ##############################################################################################
######## Recevoir les  messages dans la queue ###########################################################
#########################################################################################################
#!/usr/bin/env python3
# Permet de lire/recevoir un message de la queue et d'afficher le contenu du msg
import pika

# Etablie une conneixon avec le server RabbitMQ
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

# Create an hello queue sur laquelle notre message sera lu/reçue
# on peut déclarer la queue n'importe quel nombre de fois, elle ne sera crée qu'une seule fois
channel.queue_declare(queue='hello')

# on définit un callback qui sera appelé(par pika) à chaque nouveau message inséré dans la file
# et affichera le contenu du message
def callback(ch, method, properties, body):
    print(" [x] Received %r" % body)

# Reçoit les message de la queue lorsqu'il y a en a
# on indique à RabbitMQ que le callback définit ci dessus doit recevoir les messages de la queue 'hello'
# on doit bien sur s'assurer que la queue existe avant de s'abonner à ce callback
channel.basic_consume(queue='hello',
                      auto_ack=True,
                      on_message_callback=callback)

# On boucle en attendant les données et appelons le callback quand message reçu
print(' [*] Waiting for messages. To exit press CTRL+C')
channel.start_consuming()

# On ferme la connexion
connection.close()

#########################################################################################################

send.py ###############################################################################################
######## Envoyer des messages dans la queue ###########################################################
#######################################################################################################
#!/usr/bin/env python3
# Permet de creer une queue et d'envoyer un message dans la queue
import pika

# Etablie une conneixon avec le server RabbitMQ
# ('localhost', 15672, '/', credentials))
credentials = pika.PlainCredentials('guest', 'guest') 
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

# Create an hello queue sur laquelle notre message sera délivré
# on peut déclarer la queue n'importe quel nombre de fois, elle ne sera crée qu'une seule fois
channel.queue_declare(queue='hello')

# Envoie un message à la queue
# 1param(exchange): échange par default identifié par une chaine vide
# 2param(routing_key): on indique à quelle queud on souhaite délivré le message (queue hello içi)
# 3param(body): le corps du message 
channel.basic_publish(exchange='', routing_key='hello', body='Hello World!')
print(" [x] Sent 'Hello World!'")

# On ferme la connexion
connection.close()

#########################################################################################################

# lancer les scripts et relancer le script send plusieurs fois pour voir les messages
python receive.py
python send.py


# création d'un serveur flask 

from flask import Flask

app = Flask(__name__)

@app.route('/')
def index():
    return "Hello world !"

if __name__ == "__main__":
    app.run()


################# API GIT PYTHON ######################

clone / commit

pip install PyGithub
pip install github-api-v3

utilisation des webservices de l'API github


